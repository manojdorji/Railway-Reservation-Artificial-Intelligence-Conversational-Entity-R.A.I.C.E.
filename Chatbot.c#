using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Railway_chatbot.Models;
using Microsoft.AspNetCore.Http;
using Syn.Bot.Oscova;
using Railway_chatbot.Dialogs;
using System.Net.Mail;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;

namespace Railway_chatbot.Controllers
{
    public class HomeController : Controller
    {
        protected trainContext db;
        public HomeController(trainContext _db)
        {
            db = _db;
        }
        public IActionResult Index()
        {
            if (HttpContext.Session.GetString("uid") != null)
            {
                ViewBag.uid = HttpContext.Session.GetString("uid");
                ViewBag.faq = db.faqs.ToList();
                ViewBag.places =Newtonsoft.Json.JsonConvert.SerializeObject( db.placess.ToList());
                return View();
            }
            else
            {
                return Redirect("/Login/");
            }
            
        }
        public IActionResult ViewBooked()
        {
            if (HttpContext.Session.GetString("uid") != null)
            {   var uid= HttpContext.Session.GetString("uid");
                ViewBag.uid = HttpContext.Session.GetString("uid");
                ViewBag.faq = db.faqs.ToList();
                ViewBag.places = Newtonsoft.Json.JsonConvert.SerializeObject(db.placess.ToList());
                ViewBag.booked = db.bookings.Where(x => x.uname == uid).ToList();
                return View();
            }
            else
            {
                return Redirect("/Login/");
            }
        }
        [HttpPost]
        public IActionResult Chatbot()
        {
            string data=HttpContext.Request.Form["content"];
            var result = new List<string>();
            var bot = new OscovaBot();
            bot.Dialogs.Add(new DatabaseGenericDialog(db));
          
            bot.Trainer.StartTraining();

            bot.MainUser.ResponseReceived += (sender, eventArgs) =>
            {
                result.Add(eventArgs.Response.Text);
            };

           
               var request= data;
                var evaluationResult = bot.Evaluate(request);
                evaluationResult.Invoke();
            
            return Ok(result);
           
        }
        public IActionResult Tickecancel(long ID)
        {
            var bk = db.bookings.Find(ID);
            bk.status = "Canceled";
            db.SaveChanges();
            return Redirect("/Home/ViewBooked");
            
        }
        [HttpPost]
        public IActionResult gettrains()
        {
            string source = HttpContext.Request.Form["source"];
            string dest = HttpContext.Request.Form["dest"];
            var trn = db.ttimingss.OrderBy(x=>x.stime).ToList();
            var tlist = new List<ttimings>();
            foreach(var t in trn)
            {
                var s = t.places.Split(',').ToArray();
                var i = Array.IndexOf(s, source);
                var j = Array.IndexOf(s, dest);
                if (i < j)
                {
                    tlist.Add(t);
                }
            }
            return Ok(tlist);
        }
        [HttpPost]
        public IActionResult Booktrains()
        {
            long id =Convert.ToInt64( HttpContext.Request.Form["ID"]);
            string uid = HttpContext.Request.Form["uid"];
            string seats = HttpContext.Request.Form["seat"];
            var tt = db.ttimingss.Find(id);
            var b = new booking();
            b.cdate = DateTime.Now;
            b.edate = tt.etime;
            b.sdate = tt.stime;
            b.seats = seats;
            b.seattype = "SL";
            b.tno = tt.tno;
            b.uname = uid;
            b.status = "booked";
            db.bookings.Add(b);
            db.SaveChanges();
            var bk = db.bookings.OrderByDescending(x => x.ID).Take(1).ToList();

            var ml = db.mails.ToList();

            foreach(var m in ml)
            {
                var ur = db.users.Where(x => x.uname == uid).ToList();
                MailMessage mail = new MailMessage();
                SmtpClient SmtpServer = new SmtpClient(m.smtp);
                mail.From = new MailAddress(m.uname);
                mail.To.Add(ur[0].email);

                mail.Subject = "Ticket Booking";
                mail.Body = "Your Train ticket is booked your PNR No PNR000"+bk[0].ID.ToString()+ " and Train booked Date and timings "+bk[0].cdate.ToString() +"  "+bk[0].sdate.ToString()+"-"+bk[0].edate.ToString();
                
                SmtpServer.Port = Convert.ToInt32(m.port);

                SmtpServer.Credentials = new System.Net.NetworkCredential(m.uname, m.password);
                SmtpServer.EnableSsl = true;
                ServicePointManager.ServerCertificateValidationCallback =
        delegate (object es, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            return true;
        };
                SmtpServer.Send(mail);
            }
            return Ok(bk[0]);
        }
        public IActionResult Enquery()
        {
            if (HttpContext.Session.GetString("uid") != null)
            {
                var uid = HttpContext.Session.GetString("uid");
                ViewBag.uid = HttpContext.Session.GetString("uid");
                ViewBag.faq = db.faqs.ToList();
                return View();
            }
            else
            {
                return Redirect("/Login/");
            }
        }
        public IActionResult About()
        {
            ViewData["Message"] = "Your application description page.";

            return View();
        }

        public IActionResult Contact()
        {
            ViewData["Message"] = "Your contact page.";

            return View();
        }

        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}
